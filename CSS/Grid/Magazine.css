*, ::before, ::after {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}
html {
    /* This will set the default font size for your web page to 10px (the browser default is 16px).*/
    font-size: 92.5%;
}
body {
    font-family: Baskervville, serif;
    color: #000029;
    background-color: rgb(255, 255, 255);
}
h1 {
    font-family: Anton,sans-serif;
}
h2, h3, h4, h5, h6 {
    font-family: Raleway, sans-serif;
}
a {
    text-decoration: none;
    color: #000029;
}
main {
    display: grid;
    /* This will create three columns where the middle column is 94rem wide, and the first and last columns are both 1
    fraction of the remaining space in the grid container. */
    grid-template-columns: minmax(2rem, 1fr) minmax(min-content, 94rem) minmax(2rem, 1fr);
    row-gap: 3rem;
}
.heading {
    display: grid;
    /* you can  adjust the placement in the child rules.
    One option is the grid-column property, which is shorthand for grid-column-start and grid-column-end.
    The grid-column property tells the grid item which grid line to start and end at.
    start at grid line 2 and end at grid line 3.*/
    grid-column: 2/3;
    /* The CSS repeat() function is used to repeat a value, rather than writing it out manually, and is helpful for grid
    layouts. For example, setting the grid-template-columns property to repeat(20, 200px) would create 20 columns each
    200px wide.*/
    grid-template-columns: repeat(2, 1fr);
    row-gap: 1.5rem;
}
.text {
    grid-column: 2/3;
    font-size: 1.8rem;
    letter-spacing: 0.6px;
    column-width: 25rem;
    text-align: justify;
}
.hero {
    /* There may be times where you are unsure of how many columns your grid will have, but you want an element to stop
    at the last column. To do this, you can use -1 for the end column. */
    grid-column: 1/-1;
    position: relative;
}
img {
    width: 100%;
    /* The object-fit property tells the browser how to position the element within its container. In this case, cover
    will set the image to fill the container, cropping as needed to avoid changing the aspect ratio.*/
    object-fit: cover;
}
.hero-title {
    text-align: center;
    color: orangered;
    font-size: 8rem;
}
.hero-subtitle {
    font-size: 2.4rem;
    color: orangered;
    text-align: center;
}
.author {
    font-size: 2rem;
    font-family: Raleway, sans-serif;
}
.author-name a:hover {
    background-color: #FF1493;
}
.publish-date {
    color: rgba(0, 96, 149, 1);
}
.social-icons {
    display: grid;
    font-size: 3rem;
    grid-template-columns: repeat(5, 1fr);
    /* If you wanted to add more social icons, but keep them on the same row, you would need to update
    grid-template-columns to create additional columns. As an alternative, you can use the grid-auto-flow property.
    This property takes either row or column as the first value, with an optional second value of dense. grid-auto-flow
    uses an auto-placement algorithm to adjust the grid layout. Setting it to column will tell the algorithm to create
    new columns for content as needed. The dense value allows the algorithm to backtrack and fill holes in the grid with
    smaller items, which can result in items appearing out of order.*/
    grid-auto-flow: column;
    /* the algorithm defaults the new column width to be auto, which will not match your current columns.You can
    override this with the grid-auto-columns property. */
    grid-auto-columns: 1fr;
    /* align-items will align child elements along the column axis, and justify-items will align child elements along
    the row axis. */
    align-items: center;
}
/* The ::first-letter pseudo-selector allows you to target the first letter in the text content of an element. */
.first-paragraph::first-letter {
    font-size: 6rem;
    color: orangered;
    float: left;
    margin-right: 1rem;
}
hr {
    margin: 1.5rem 0;
    border: 1px solid rgba(120, 120, 120, 0.6);
}
.quote {
    color: rgba(0, 96, 149, 1);
    font-size: 2.4rem;
    text-align: center;
    font-family: Raleway, sans-serif;
}
.quote::before {
    content: '" ';
}
.quote::after {
    content: ' "';
}
.text-with-images {
    display: grid;
    grid-template-columns: 1fr 2fr;
    column-gap: 3rem;
    margin-bottom: 3rem;
}