/*
.gallery {
    width: 50%;
    border: 5px solid red;
}
img {
    width: 100%;
    padding: 5px;
    border: 5px solid blue;
}*/
* {
    /* With this model, when an element has a specific width,
    that width is calculated based only on the element's content.
    Padding and border values get added to the total width,
    so the element grows to accommodate these values.*/
    box-sizing: content-box;
    /* border-box: border-box; The border-box sizing model does the opposite of content-box.
    The total width of the element, including padding and border, will be the explicit width set.
    The content of the element will shrink to make room for the padding and border.*/
}
.gallery img {
    width: 100%;
    max-width: 350px;
    height: 300px;
    /* the images have different aspect ratios. use the object-fit property to determine how images should behave.
    This will tell the image to fill the img container while maintaining aspect ratio, resulting in cropping to fit.*/
    object-fit: cover;
    border-radius: 10px;
}
body {
    margin: 0;
    font-family: sans-serif;
    background-color: #f5f6f7;
}
.header {
    text-transform: uppercase;
    padding: 32px;
    background-color: #0a0a23;
    text-align: center;
    color: #fff;
    border-bottom: 4px solid #fdb347;
}

/* Flexbox has a main and cross axis.
The main axis is defined by the flex-direction property, which has four possible values:

row (default): horizontal axis with flex items from left to right
row-reverse: horizontal axis with flex items from right to left
column: vertical axis with flex items from top to bottom
column-reverse: vertical axis with flex items from bottom to top
*/
.gallery {
    display: flex;
    flex-direction: row;
    /* The flex-wrap property determines how your flex items behave when the flex container is too small.
    Setting it to wrap will allow the items to wrap to the next row or column.
    nowrap (default) will prevent your items from wrapping and shrink them if needed.*/
    flex-wrap: wrap;
    /* The justify-content property determines how the items inside a flex container are positioned along the main axis,
    affecting their position and the space around them.*/
    justify-content: center;
    /* The align-items property positions the flex content along the cross axis. */
    align-items: center;
    padding: 20px 10px;
    max-width: 1400px;
    margin: 0 auto;
    /* The gap CSS shorthand property sets the gaps, also known as gutters, between rows and columns.
    The gap property and its row-gap and column-gap sub-properties provide this functionality for flex,
    grid, and multi-column layout. */
    gap: 16px;
}
/* The ::after pseudo-element creates an element that is the last child of the selected element.
e.g, .container::after {
  content: "";
  width: 860px;
}*/
.gallery::after {
    content: "";
    width: 350px;
}