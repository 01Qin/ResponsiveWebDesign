:root {
    --penguin-face: white;
    --penguin-picorna: orange;
    --penguin-skin: gray;
}
body {
    background: linear-gradient(45deg, rgb(255, 104, 166), rgb(221, 241, 222));
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100vh;
    /* Remove both the horizontal and vertical scrollbars */
    overflow: hidden;
}
.ground {
    width: 100vw;
    height: calc(100vh - 300px);
    margin-top: -58px;
    background: linear-gradient(90deg, rgb(255, 93, 166), rgb(247, 255, 222));
    /* the .ground element will be third in the stacking context of the page layout */
    z-index: 3;
    position: absolute;
}
/* Target all descendent elements of the .penguin element */
.penguin * {
    position: absolute;
}
.penguin {
    width: 300px;
    height: 300px;
    margin: auto;
    margin-top: 75px;
    /* Change the stack level of the .penguin element such that it appears in front of the .ground element */
    z-index: 4;
    position: relative;
    transition-duration: 1s;
    transition-timing-function: ease-in-out;
    transition-delay: 0ms;
}
/* Target the .penguin element when it is active, and increase its size by 50% in both dimensions. */
.penguin:active {
    transform: scale(1.5);
    cursor: not-allowed;
}
.penguin-head {
    width: 50%;
    height: 45%;
    background: linear-gradient(45deg, var(--penguin-skin), rgb(239, 240, 228));
    border-radius: 70% 70% 65% 65%;
    top: 10%;
    left: 25%;
    z-index: 1;
}
.face {
    width: 60%;
    height: 70%;
    background-color: var(--penguin-face);
    border-radius: 70% 70% 60% 60%;
    top: 15%;
}
/* Target the .face element with the left class */
.face.left {
    left: 5%;
}
.face.right {
    right: 5%;
}
.chin {
    width: 90%;
    height: 70%;
    background-color: var(--penguin-face);
    top: 25%;
    left: 5%;
    border-radius: 70% 70% 100% 100%;
}
.eye {
    width: 15%;
    height: 17%;
    background-color: black;
    top: 45%;
    border-radius: 50% 50% 50% 50%;
}
.eye.left {
    left: 25%;
}
.eye.right {
    right: 25%;
}
.eye-lid {
    width: 150%;
    height: 100%;
    background-color: var(--penguin-face);
    top: 25%;
    left: -23%;
    border-radius: 50% 50% 50% 50%;
}
.blush {
    width: 15%;
    height: 10%;
    background-color: plum;
    top: 65%;
    border-radius: 50% 50% 50% 50%;
}
.blush.left {
    left: 15%;
}
.blush.right {
    right: 15%;
}
.beak {
    height: 10%;
    background-color: var(--penguin-picorna);
    border-radius: 50% 50% 50% 50%;
}
.beak.top {
    width: 20%;
    top: 60%;
    left: 40%;
}
.beak.bottom {
    width: 16%;
    top: 65%;
    left: 42%;
}
.shirt {
    font: bold 25px Helvetica, sans-serif;
    top:  165px;
    left: 128px;
    z-index: 1;
    color: #FF1493;
}
/* targeting the div with the heart emoji.
In some browsers, the heart emoji may look slightly different from the previous step. This is because some of the
character's properties were overridden by the font-weight style of bold. */
.shirt div {
    font-weight: normal;
    top: 23px;
    left: 12px;
}
.penguin-body {
    width: 53%;
    height: 45%;
    background: linear-gradient(45deg, rgb(134, 133, 133) 0%, rgb(234, 231, 231)25%, white 67%);
    border-radius: 80% 80% 100% 100%;
    top: 40%;
    left: 23.5%;
}
.penguin-body::before {
    content: "";
    position: absolute;
    width: 50%;
    height: 45%;
    background-color: var(--penguin-skin);
    top: 10%;
    left: 25%;
    border-radius: 0 0 100% 100%;
    /* Increase the pseudo-element's transparency */
    opacity: 70%;
}
.arm {
    width: 30%;
    height: 60%;
    background: linear-gradient(90deg, var(--penguin-skin), rgb(209, 210, 199));
    /* top-left, top-right, and bottom-right corners a radius of 30%, and the bottom-left corner a radius of 120%. */
    border-radius: 30% 30% 30% 120%;
    z-index: -1;
}
.arm.left {
    top: 35%;
    left: 5%;
    /* to be the top left corner of its parent */
    transform-origin: top left;
    /* first rotate it by 130deg, then invert the x-axis. */
    transform: rotate(130deg) scaleX(-1);
    /* Use the wave animation on the left arm. Have the animation last 3s, infinitely iterate,
    and have a linear timing function. */
    animation: wave 3s infinite linear;
}
.arm.right {
    top: 0;
    right: -5%;
    /* 45deg counterclockwise */
    transform: rotate(-45deg);
}
.foot {
    width: 15%;
    height: 30%;
    background-color: var(--penguin-picorna);
    top: 85%;
    border-radius: 50% 50% 50% 50%;
    /* the .foot elements appear beneath the .penguin-body element */
    z-index: -1;
}
.foot.left {
    left: 25%;
    transform: rotate(80deg);
}
.foot.right {
    right: 25%;
    transform: rotate(-80deg);
}

.left-mountain {
    width: 300px;
    height: 300px;
    background: linear-gradient(rgb(221, 241, 228),rgb(207, 93, 166));
    /* To prevent the mountain from pushing the .ground element */
    position: absolute;
    /* the skew transform function, which takes two arguments. The first being an angle to shear the x-axis by,
    and the second being an angle to shear the y-axis by. */
    transform: skew(0, 44deg);
    /* Set the stack level of the mountain element such that it remains directly behind the .ground element. */
    z-index: 2;
    margin-top: 100px;
}
.back-mountain {
    width: 300px;
    height: 300px;
    background: linear-gradient(rgb(221, 241, 228),rgb(207, 93, 166));
    position: absolute;
    z-index: 1;
    transform: rotate(45deg);
    left: 110px;
    top: 225px;
}
.sun {
    width: 200px;
    height: 200px;
    background-color: yellow;
    position: absolute;
    /* set the border-radius such that the sun's shape is a circle. */
    border-radius: 50%;
    top: -75px;
    /* Position the sun in the top right corner of the screen */
    right: -75px;
}
/* use CSS animations to make the penguin wave.*/
@keyframes wave {
    /* Give wave four waypoints starting at 10%, and incrementing by 10%. */
    10% {
        /* rotate to 110deg, and retain the scaling of the left arm. */
        transform: rotate(110deg) scaleX(-1);
    }
     20% {
         transform: rotate(130deg) scaleX(-1);
    }
     30% {
         transform: rotate(110deg) scaleX(-1);
    }
     40% {
         transform: rotate(130deg) scaleX(-1);
    }

}