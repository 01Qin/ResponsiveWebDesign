* {
    box-sizing: border-box;
}
body {
    background-color: #c9d2fc;
}
.cat-head {
    width: 205px;
    height: 180px;
    border: 1px solid #000;
    border-radius: 46%;
    background: linear-gradient(#5e5e5e 85%, #45454f 100%);
    /* static is the default positioning for all elements. If you assign it to an element,
    you won't be able to move it around with top, right, left, or bottom.

    position: static;

    When you use the absolute value for your position property,
    the element is taken out of the normal flow of the document, and then its position is determined
    by the top, right, bottom, and left properties.
    The last position property value is sticky. sticky positioning is a hybrid of relative and fixed positioning.
    It allows an element to stick to a specific position within its containing element or viewport,
    based on the scroll position. */
    position: absolute;
    /* Set a value of 0 for the right, left, top, bottom properties, then set its margin property on all sides to auto.
    That's one way to center an element vertically and horizontally using CSS positioning. */
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    margin: auto;

}
/* .box {
    width: 200px;
    height: 600px;
    background-color: #000;
    position: absolute;
    top: 800px;
    left: 650px;
} */
/* .cat-right-ear {
    height: 0;
    width: 0;

    border-top: 35px solid transparent;
    border-left: 35px solid transparent;
    border-bottom: 35px solid red;
    border-right: 35px solid transparent;
} */
.cat-left-ear {
    height: 0;
    width: 0;
    top: -26px;
    left: -31px;
    position: absolute;
    border-left: 35px solid transparent;
    border-right: 35px solid transparent;
    border-bottom: 70px solid rosybrown;
    /* those edges are too sharp for an ear. */
    border-top-left-radius: 90px;
    border-top-right-radius: 10px;
    /* the transform property allows you to modify the shape, position,
    and size of an element without changing the layout or affecting the surrounding elements.
    It has functions such as translate(), rotate(), scale(), skew(), and matrix(). */
    transform: rotate(-45deg);
    /* z-index is a property to define the order of overlapping HTML elements.
    Any element with a higher z-index will always be positioned over an element with a lower z-index. */
    z-index: 1;
}
.cat-left-inner-ear {
    border-left: 20px solid transparent;
    border-right: 20px solid transparent;
    border-bottom: 40px solid rosybrown;
    position: absolute;
    top: 22px;
    left: -20px;
    /* a bottom-right and bottom-left border radius of 40% each,
    a top-left border radius of 90px, and a top-right border radius of 10px */
    border-radius: 90px 10px 40% 40%;
}
.cat-right-ear {
    border-left: 35px solid transparent;
    border-right: 35px solid transparent;
    border-bottom: 70px solid rosybrown;
    position: absolute;
    top: -26px;
    left: 163px;
    transform: rotate(45deg);
    /* Remove the sharp border of the right ear. */
    border-top-left-radius: 90px;
    border-top-right-radius: 10px;
    z-index: 1;
}
.cat-right-inner-ear {
    border-left: 20px solid transparent;
    border-right: 20px solid transparent;
    border-bottom: 40px solid rosybrown;
    position: absolute;
    top: 22px;
    left: -20px;
    border-radius: 90px 10px 40% 40%;
}
.cat-left-eye {
    width: 30px;
    height: 40px;
    background-color: #000;
    position: absolute;
    top: 54px;
    left: 39px;
    border-radius: 60%;
    transform: rotate(25deg);
}